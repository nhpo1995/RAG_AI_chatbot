import logging
import colorlog

def setup_colored_logger(level=logging.INFO):
    """
    Thi·∫øt l·∫≠p logger v·ªõi m√†u s·∫Øc t√πy ch·ªânh.
    Cho ph√©p truy·ªÅn v√†o m·ª©c log m·∫∑c ƒë·ªãnh (INFO, DEBUG, ...).
    """
    logger = colorlog.getLogger()
    logger.setLevel(level)  # Gi·ªù c√≥ th·ªÉ ch·ªânh: logging.INFO, WARNING, etc.

    formatter = colorlog.ColoredFormatter(
        '%(log_color)s%(levelname)-8s | %(message)s',
        log_colors={
            'DEBUG': 'cyan',
            'INFO': 'green',
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'bold_red',
        }
    )

    handler = colorlog.StreamHandler()
    handler.setFormatter(formatter)

    if logger.hasHandlers():
        logger.handlers.clear()
    logger.addHandler(handler)

    # üîï T·∫Øt log DEBUG t·ª´ c√°c th∆∞ vi·ªán b√™n th·ª© ba
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("httpcore").setLevel(logging.WARNING)
    logging.getLogger("openai").setLevel(logging.WARNING)
    logging.getLogger("haystack").setLevel(logging.WARNING)
    logging.getLogger("qdrant_client").setLevel(logging.WARNING)

    return logger
